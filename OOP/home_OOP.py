# """
# 1) Создайте класс Circle, с переменными класса задающие по умолчанию цвет круга - синий, и число Пи(3.14). Экземпляры класса Circle в свою очередь должны иметь обязательный аттрибут - радиус. Также класс должен иметь метод расчета площади круга. Создайте экземпляр класса, переопределите цвет экземпляра и расчитайте площадь фигуры.
# """

# class Circle: 
#     pi = 3.14
#     color_of_cirle = "blue"
#     def __init__(self, r):
#         self.r = r
#     def s(self):
#         return (f'площадь круга: {(self.r ** 2) * self.pi}')
    
# krug1 = Circle(5)
# print(krug1.s())

# """
# 2) Создайте класс для песен Song. Каждая песня имеет название, автора и год выпуска. Добавьте три метода show_author, show_title, show_year, выводящие утверждения о каждом атрибуте экземпляра класса Song, например: "Эта песня вышла в 2010 году". Создайте экземпляр класса с вашей любимой песней и примените все методы.
# # """

# class Song:
#     def __init__(self, name_of_song, author, year):
#         self.name = name_of_song
#         self.author = author
#         self.year = year

#     def show_author(self):
#         return(f'Автор этой песни {self.author}.')
#     def show_title(self):
#         return(f'Название этой песни {self.name}.')
#     def show_year(self):
#         return(f'Это песня вышла в {self.year} году.')
    
# song1 = Song('Photograph', 'Edd Sheran', '2020')
# print(song1.show_author(), song1.show_title(), song1.show_year())        

# """

# 3) Создайте класс Taxi, объекты которого имеют такие атрибуты как название компании, стоимость посадки, стоимость за каждый пройденный километр. Также добавьте к классу метод расчитывающий стоимость поездки. Создайте три экземпляра класса Taxi для трех разных компаний Namba, Yandex и Jorgo и расчитайте стоимость поездки на каждом из них.
# """

# class Taxi:
    
#     def __init__(self, name_of_company, price_of_landing, price_of_passed_km):
#         self.name_of_company = name_of_company
#         self.price_of_landing = price_of_landing
#         self.price_of_passed_km = price_of_passed_km
#     def company(self, count_km):
#         res = (f'Ваша стоимость поездки: {self.price_of_landing + self.price_of_passed_km  * count_km}')
#         return(f'{self.name_of_company}: price_of_landing: {self.price_of_landing}, price_of_passed_km: {self.price_of_passed_km}, {res}')
    
    
# product = Taxi('Namba', 50, 20)
# print(product.company(5))
        

# """
# 4) Создайте класс телефонной книги. У контактов должны быть имена и фамилии и номер телефона. Также создайте метод get_info, который выводит информацию о контакте в следующем виде: "Контакт: Иван Петров, телефон: +996555777888".
# Затем объявите экземляр класса и вызовите метод.
# # """
# class Contact:
#     def __init__(self, name, famile, number):
#         self.name = name
#         self.famile = famile
#         self.number = number
#     def get_info(self):
#         return(f'Контакт: {self.name}{self.famile}, телефон: {self.number}')
    
# telephone = Contact('Zhanybek', 'Baktybekov', "+996708812390")
# print(telephone.get_info())


# """
# 5) Напишите класс Salary для расчета налогов на заработную плату. У класса должна быть обязательная переменная класса - процент налога от зарплаты - 8%. Объекты класса должны иметь сумму зарплаты и стаж работы в качестве атрибутов. Также у класса должен быть метод расчитывающий сумму налога заплаченного за весь стаж работы. Создайте экземпляр класса и посчитайте сумму вашего налога.
# """


# class Salary:
#     tax = 8
#     def __init__(self, sum_of_salry, expierence_of_job):
#         self.salary = sum_of_salry
#         self.expierence = expierence_of_job
#     def counter(self):
#         return (f'tax amount: {self.salary * self.tax / 100 * self.expierence}')
# res = Salary(15000000, 2)
# print(res.counter())



# Создайте класс Soda принимающий 1 аргумент при инициализации (отвечающий за добавку к выбираемому лимонаду).
# В этом классе реализуйте метод show_my_drink(), выводящий на печать «Газировка и {ДОБАВКА}» в случае наличия добавки, а иначе отобразится следующая фраза: «Обычная газировка».

# class Soda:
#     def __init__(self, suplements) -> None:
#         self.suplements = suplements
#     def show_my_drink(self):
#         if self.suplements == None:
#             print('Обычная газировка!')
#         else:
#             print(f'Газировка и {self.suplements}!')
# drinks = Soda('pineapple')
# drinks.show_my_drink()

# Создайте класс Student. При создании его экземпляра, мы должны записать имя и фамилию студента в соответствующие переменные объекта. В классе должны быть:
#  1 переменная объекта books = [ ]
#  2 переменная объекта “knowledge” со значением по умолчанию 0
#  3 метод read_book, который принимает название книги, добавляет книгу в books, добавляет 100 баллов в knowledge
#  4 метод do_homework, который при вызове добавляет 10 баллов в knowledge
#  5 Создайте экземпляры, вызовите методы.

# 6. Создайте класс имеющий атрибут "дата рождения" и автоматически просчитываемый возраст по входящей дате рождения. Используйте модуль time/datetime

# class Student:
#     def __init__(self, name):
#         self.name = name
#         self.books = []
#         self.knowledge = 0
#     def read_book(self,name_of_books):
#         self.books.append(name_of_books)
#         print(f'{self.name} has read this book {name_of_books}')
#     def do_homework(self):
#         self.knowledge += 10
#         print(f'{self.name} You are deserve to {self.knowledge}')
    
# b = Student('Richard Pawl Evens')
# b.read_book('Books 1')
# b.do_homework()




# Задание 2: Класс "Студент"

# Задача: Определите класс Студент с атрибутами имя и оценки (список оценок). Добавьте методы для добавления оценки к списку оценок и метод для расчета среднего балла.

# Пример использования:

# студент = Студент("Иван")
# студент.добавить_оценку(5)
# студент.добавить_оценку(4)
# print(студент.расчет_среднего()) -> 4.5


# Задание 1: Класс "Комната" и "Дом"
# Цель: Практика в создании взаимодействующих объектов и управлении ими.

# Задача: Создайте класс Комната с атрибутами название, ширина и длина. Добавьте метод, который вычисляет площадь комнаты. Затем создайте класс Дом, который содержит список комнат. В классе Дом должны быть методы для добавления комнаты и вычисления общей площади дома.

# Задание 3: Класс "Библиотека" и "Книга"
# Цель: Работа с коллекциями объектов и их методами.

# Задача: Расширьте класс Книга из предыдущего задания, добавив атрибут количество. Создайте класс Библиотека, который будет содержать список книг. В классе Библиотека реализуйте методы для добавления книги (с учетом уже существующих тайтлов), удаления книги по названию, и поиска книг по автору.

# Задание 4: Класс "Магазин" и "Продукт"
# Цель: Изучение принципов инкапсуляции и взаимодействия объектов.

# Задача: Создайте класс Продукт с атрибутами название, цена и категория. Затем создайте класс Магазин, который будет содержать список продуктов. В Магазине реализуйте методы для добавления продукта, удаления продукта по названию, и метод, который выводит список продуктов определенной категории.

# Задание 5: Класс "Пользователь" и "УчетнаяЗапись"
# Цель: Глубокое понимание взаимодействия классов и управления состоянием.

# Задача: Создайте класс Пользователь с атрибутами имя, фамилия и email. Создайте класс УчетнаяЗапись, который будет содержать пользователя, логин, пароль и баланс. В классе УчетнаяЗапись реализуйте методы для изменения пароля, пополнения баланса и совершения платежа, проверяя достаточность средств на балансе.



# ДЗ 1
# 1. Создать класс Person с атрибутами fullname, age, is_married
# 2. Добавить в класс Person метод introduce_myself, который бы распечатывал всю
# информацию о человеке
# 3. Создать класс Student наследовать его от класса Person и дополнить его атрибутом
# marks, который был бы словарем, где ключ это название урока, а значение - оценка.
# 4. Добавить метод в класс Student, который бы подсчитывал среднюю оценку ученика по
# всем предметам
# 5. Создать класс Teacher и наследовать его от класса Person, дополнить атрибутом
# experience.
# 6. Добавить в класс Teacher атрибут уровня класса salary
# 7. Также добавить метод в класс Teacher, который бы считал зарплату по следующей
# формуле: к стандартной зарплате прибавляется бонус 5% за каждый год опыта свыше 3х
# лет.
# 8. Создать объект учителя и распечатать всю информацию о нем и высчитать зарплату
# 9. Написать функцию create_students, в которой создается 3 объекта ученика, эти ученики
# добавляются в список и список возвращается функцией как результат.
# 10. Вызвать функцию create_students и через цикл распечатать всю информацию о каждом
# ученике с его оценками по каждому предмету. Также рассчитать его среднюю оценку по
# всем предметам.